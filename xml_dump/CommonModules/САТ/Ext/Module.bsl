
Функция ПолучитьHTTPсоединение() Экспорт
	
	Рез = ПолучитьURLиАдресРесурса();
	
	Если Рез = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НРЕГ(Рез.Протокол) = "http" Тогда
		Соединение = Новый HTTPСоединение(Рез.Сервер);
	ИначеЕсли НРЕГ(Рез.Протокол) = "https" Тогда
		ssl1 = Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено);
		Соединение = Новый HTTPСоединение(Рез.Сервер,,,,,,ssl1);
	Иначе
		//Некорректный URL API
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Соединение;
	
КонецФункции

Функция ПолучитьHTTPЗапрос(Операция) Экспорт
	
	Рез = ПолучитьURLиАдресРесурса();
	Запрос = Новый HTTPЗапрос(Рез.АдресРесурса + Операция);
	Возврат Запрос;
	
КонецФункции

Функция ПолучитьURLиАдресРесурса() Экспорт
	
	//Адрес = "http://10.10.130.204/test_maznov/hs/api";
	Адрес = "http://urm.sat.ua/openws/hs/api";
		
	Поз = Найти(Адрес,"://");
	Если Поз = -1 Тогда
		СообщитьПользователю("Некорректный адрес веб-сервиса");
		Возврат Неопределено;
	КонецЕсли;
	
	Протокол = Лев(Адрес,Поз-1);
	Адрес = Сред(Адрес,Поз+3);
	
	Если НРЕГ(Протокол) <> "http"
		И НРЕГ(Протокол) <> "https" Тогда
		СообщитьПользователю("Некорректный адрес веб-сервиса");
		Возврат Неопределено;
	КонецЕсли;
	
	Поз = Найти(Адрес,"/");
	Если Поз = -1 Тогда
		СообщитьПользователю("Некорректный адрес веб-сервиса");
		Возврат Неопределено;
	КонецЕсли;
	
	Рез = Новый Структура("Протокол, Сервер, АдресРесурса");
	Рез.Протокол = Протокол;
	Рез.Сервер = Лев(Адрес,Поз-1);
	Рез.АдресРесурса = Сред(Адрес,Поз+1);
	
	Если Прав(Рез.АдресРесурса,1) <> "/" Тогда
		Рез.АдресРесурса = Рез.АдресРесурса + "/";
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

Функция xml_ПолучитьПараметры(ТекстXML) Экспорт
	
	Рез = Новый Структура("Успешно, Массив, КодОшибки, ТекстОшибки, Примечание", Истина);
	РезМассив = Новый Массив;
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	Построитель = Новый ПостроительDOM;
	Дом = Построитель.Прочитать(Чтение);
	Массив = Дом.ПолучитьЭлементыПоИмени("success");
	
	Если Массив.Количество() = 0 Тогда
		Рез.Успешно = Ложь;
		Рез.КодОшибки = "";
		Рез.ТекстОшибки = "Не удалось прочитать ответ сервера";
		Возврат Рез;
	КонецЕсли;
	
	Если Массив[0].ТекстовоеСодержимое = "false" тогда
		Рез.Успешно = Ложь;
		Массив = Дом.ПолучитьЭлементыПоИмени("error");
		Рез.КодОшибки = Массив[0].ПолучитьЭлементыПоИмени("code")[0].ТекстовоеСодержимое;
		Рез.ТекстОшибки = Массив[0].ПолучитьЭлементыПоИмени("text")[0].ТекстовоеСодержимое;
		МассивПримечание = Массив[0].ПолучитьЭлементыПоИмени("note");
		Если МассивПримечание.Количество()>0 Тогда
			Рез.Примечание = МассивПримечание[0].ТекстовоеСодержимое;
		КонецЕсли;
		Возврат Рез;
	КонецЕсли;
	
	Массив = Дом.ПолучитьЭлементыПоИмени("item");
	Если Массив.Количество() = 0 Тогда
		Массив = Дом.ПолучитьЭлементыПоИмени("request");
	КонецЕсли;
	
	Для Каждого Стр Из Массив Цикл
		
		СтрРез = Новый Структура;
		
		Если ТипЗнч(Стр) = Тип("ЭлементDOM") Тогда
			Для Каждого Свойство Из Стр.ДочерниеУзлы Цикл
				Если ТипЗнч(Свойство) = Тип("ЭлементDOM") Тогда
					
					ЕстьДочерниеУзлы = Ложь;
					Для Каждого Запись Из Свойство.ДочерниеУзлы Цикл
						Если ТипЗнч(Запись) = Тип("ЭлементDOM") Тогда
							ЕстьДочерниеУзлы = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕстьДочерниеУзлы = Истина Тогда
						Значение = Новый Структура;
						Для Каждого Запись Из Свойство.ДочерниеУзлы Цикл
							Если ТипЗнч(Запись) = Тип("ЭлементDOM") Тогда
								Значение.Вставить(Запись.ИмяЭлемента, Запись.ТекстовоеСодержимое);
							КонецЕсли;
						КонецЦикла;
					Иначе
						Значение = Свойство.ТекстовоеСодержимое;
					КонецЕсли;
					
					пЗначение = Неопределено;
					Если СтрРез.Свойство(Свойство.ИмяЭлемента,пЗначение) Тогда
						Если ТипЗнч(пЗначение) = Тип("Массив") Тогда
							М = пЗначение;
						Иначе
							М = Новый Массив;
							М.Добавить(пЗначение);
						КонецЕсли;
						М.Добавить(Значение);
						СтрРез.Вставить(Свойство.ИмяЭлемента, М);
					Иначе
						СтрРез.Вставить(Свойство.ИмяЭлемента, Значение);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		РезМассив.Добавить(СтрРез);
		
	КонецЦикла;
	
	Рез.Массив = РезМассив;
	
	Возврат Рез;
	
КонецФункции

Функция json_ПолучитьПараметры(ТекстJSON)  Экспорт
	Рез = новый Структура("Успешно,Массив,КодОшибки,ТекстОшибки,Примечание",истина);
	РезМассив = Новый Массив;
	Попытка
		Данные = САТ.лПрочитатьJSON(ТекстJSON);
	Исключение
		Рез.Успешно = Ложь;
		Рез.КодОшибки = "";
		Рез.ТекстОшибки = "Не удалось прочитать ответ сервера";
		Возврат Рез;
	КонецПопытки;
	Если ТипЗнч(Данные)=Тип("Соответствие") Тогда
		Если Данные["success"] = "false" Тогда
			Рез.Успешно = Ложь;
			Рез.КодОшибки = Данные["error"]["code"];
			Рез.ТекстОшибки = Данные["error"]["text"];
			Рез.Примечание = Данные["error"]["note"];
			Возврат Рез;
		КонецЕсли;
		Массив = Данные["data"];
	Иначе
		Рез.Успешно = Ложь;
		Рез.ТекстОшибки = "Не удалось прочитать ответ сервера";
		Возврат Рез;
	КонецЕсли;
	Для Каждого Стр Из Массив Цикл
		СтрРез = Новый Структура;
		Для Каждого Стр2 Из Стр Цикл
			Если ТипЗнч(Стр2.Значение)=Тип("Массив") Тогда
				Табл = новый Массив;
				Для Каждого Запись Из Стр2.Значение Цикл
					СтрТабл = Новый Структура;
					Если ТипЗнч(Запись)=Тип("Соответствие") Тогда
						для Каждого СвойствоЗаписи Из Запись Цикл
							СтрТабл.Вставить(СвойствоЗаписи.Ключ,СвойствоЗаписи.Значение);
						КонецЦикла;
					Иначе
						СтрТабл.Вставить(Стр2.Ключ,Запись);
					КонецЕсли;						
					Табл.Добавить(СтрТабл);
				КонецЦикла;
				СтрРез.Вставить(Стр2.Ключ,Табл);
			Иначе
				СтрРез.Вставить(Стр2.Ключ,Стр2.Значение);
			КонеЦЕсли;
		КонецЦикла;
		РезМассив.Добавить(СтрРез);
	КонецЦикла;
	рез.Массив = РезМассив;
	Возврат Рез;
КонецФункции

// JSON парсер.
//
// Параметры:
//	Значение - Строка. Строка данных в формате JSON для парсинга;
//
//  Стандарт - Неопределено, Булево. Режим работы:
//		- Истина - стандартный режим (значение по умолчанию);
//		- Ложь - альтернативный режим;
//		- Неопределено - автоопределение режима;
//
//  ПредставленияСсылок - Неопределено, Булево. Режим передачи ссылочных типов, с их представлением или без:
//		- Истина - ссылки передаются вместе со своим представлением, как объекты с двумя свойствами содержащими саму ссылку и ее представление;
//		- Ложь - ссылки передаются без представления (значение по умолчанию).
//		- Неопределено - автоопределение режима.
// 
// Возвращаемое значение:
//  Набор данных согласно содержимому входящих данных. 
//
Функция лПрочитатьJSON(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь, ПриводитьКСтруктуре = Ложь) Экспорт 
	
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(Значение);
	Возврат ПрочитатьJSON(Чтение, ПриводитьКСтруктуре = Ложь,,, "лВосстановитьЗначение", САТ);
		
КонецФункции

Функция лВосстановитьЗначение(Свойство,Значение,Доп) Экспорт
	
	Если ТипЗнч(Значение) = Тип("Строка")
		И СтрДлина(Значение) = 36 Тогда
		
		Попытка
			Возврат Новый УникальныйИдентификатор(Значение);
		Исключение
			Возврат Значение;
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка")
		И СтрДлина(Значение) = 19 Тогда
		
		Попытка
			Возврат Новый УникальныйИдентификатор(Значение);
		Исключение
			Возврат Значение;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// JSON сериализатор.
//
// Параметры:
//	Значение. Набор данных сериализуемых в формат JSON;
//
//  Стандарт - Булево. Режим работы:
//		- Истина - стандартный режим (значение по умолчанию);
//		- Ложь - альтернативный режим;
//
//  ПредставленияСсылок - Булево. Режим передачи ссылочных типов, с их представлением или без:
//		- Истина - ссылки передаются вместе со своим представлением, как объекты с двумя свойствами содержащими саму ссылку и ее представление;
//		- Ложь - ссылки передаются без представления (значение по умолчанию).
// 
// Возвращаемое значение:
//  Строка. Строка данных в формате JSON согласно содержимому входящих данных. 
//
Функция лЗаписатьJSON(Значение, Стандарт = Истина, ПредставленияСсылок = Ложь) Экспорт 
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Значение,, "ПолучитьЗначение", САТ);
	Возврат Запись.Закрыть();
		
КонецФункции // ЗаписатьJSON()

&НаСервере
Функция ПолучитьЗначение(Свойство,Значение,Доп,Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
		
		м = Новый Массив;
		
		Для Каждого Стр Из Значение Цикл
			
			Стр2 = Новый Структура;
			
			Для Каждого Кол Из Значение.Колонки Цикл
				Стр2.Вставить(Кол.Имя,Стр[Кол.Имя]);
			КонецЦикла;			
			
			М.Добавить(Стр2);
			
		КонецЦикла;
		
		Возврат М;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СтрокаТаблицыЗначений") Тогда
		
		Стр = Новый Структура;
		Табл = Значение.Владелец();
		
		Для Каждого Кол Из Табл.Колонки Цикл
			
			Стр.Вставить(Кол.Имя,Значение[Кол.Имя]);
			
		КонецЦикла;
		
		Возврат Стр;
		
	КонецЕсли;
	
	Возврат Строка(Значение);
	
КонецФункции

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ПолеВРеквизитеФормыОбъект",
//		"Объект");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"Объект.ПолеВРеквизитеФормыОбъект");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ,
//		"ИмяРеквизитаФормы");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), ОбъектИнформационнойБазы, "Ответственный",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр("ru = 'Сообщение об ошибке.'"), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = "",
		Знач ПутьКДанным = "",
		Отказ = Ложь) Экспорт 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры