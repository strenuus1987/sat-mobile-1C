
&НаКлиенте
Перем ГородОтправкиМассив;

&НаКлиенте
Перем ГородПолученияМассив;

&НаСервере
Перем ТЗДопУслуг;

/////////////////////////////////////////////////////////////

&НаКлиенте
Функция ПолучитьДанныеВыбораСервер(ИмяЭлемента, Текст)
	
	Если СтрДлина(Текст) < 4 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Соединение = САТ.ПолучитьHTTPсоединение();
	
	Операция = "v1.0/main/json/getTowns?searchString=" + Текст;
	
	Запрос = САТ.ПолучитьHTTPЗапрос(Операция);
	
	Попытка
		
		Ответ = Соединение.Получить(Запрос);
		СтруктураОтвета = САТ.json_ПолучитьПараметры(Ответ.ПолучитьТелоКакСтроку());
		
		Если СтруктураОтвета.Успешно Тогда
			
			СписокЗначений = Новый СписокЗначений;
			
			Если ИмяЭлемента = "ГородОтправки" Тогда
			
				ГородОтправкиМассив.Очистить();
			
				ГородОтправкиМассив = СтруктураОтвета.Массив;
				
			ИначеЕсли ИмяЭлемента = "ГородПолучения" Тогда
				
				ГородПолученияМассив.Очистить();
			
				ГородПолученияМассив = СтруктураОтвета.Массив;
								
			КонецЕсли;
			
			Для Каждого Элемент Из СтруктураОтвета.Массив Цикл
				
				//Если СтрНайти(Элемент.district, "городской совет") > 0 Тогда
					
					СписокЗначений.Добавить(Элемент.description + "/" + Элемент.region);
					
				//Иначе
				//	
				//	СписокЗначений.Добавить(Элемент.description + "/" + Элемент.district + "/" + Элемент.region);
				//	
				//КонецЕсли;
				
			КонецЦикла;
			
			Возврат СписокЗначений;
			
		Иначе 	
			
			САТ.СообщитьПользователю("Код ошибки: " + СтруктураОтвета.КодОшибки + Символы.ПС + СтруктураОтвета.ТекстОшибки);
					
		КонецЕсли;
		
	Исключение
		САТ.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;	
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ГородОтправкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеВыбораСервер(Элемент.Имя, Текст);
		
КонецПроцедуры

&НаКлиенте
Процедура ГородПолученияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьДанныеВыбораСервер(Элемент.Имя, Текст);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьНачальныеЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачальныеЗначения()
	
	ТипГруза = "Стандарт";
	ТипГрузаПриИзмененииКлиент();	
	
	ОбщаяСтоимостьГруза = 300;
	ОбщийВес = 10;
	
	КоличествоМест = 1;
		
КонецПроцедуры

/////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ТипГрузаПриИзменении(Элемент)
	
	ТипГрузаПриИзмененииКлиент();
		
КонецПроцедуры

&НаКлиенте
Процедура ТипГрузаПриИзмененииКлиент()
	
	ЭтоКорреспонденция = ТипГруза = "Документы";
	ЭтоСтандарт = ТипГруза = "Стандарт";
	ЭтоПосылка = (ТипГруза = "ПосылкаS") ИЛИ (ТипГруза = "ПосылкаM") ИЛИ (ТипГруза = "ПосылкаL");
	ЭтоЛегковаяШина = ТипГруза = "лКолеса";
	ЭтоГрузоваяШина = ТипГруза = "гКолеса";
	
	Элементы.Группа5.Видимость = ЭтоКорреспонденция ИЛИ ЭтоСтандарт ИЛИ ЭтоПосылка;
	Элементы.Группа6.Видимость = ЭтоЛегковаяШина ИЛИ ЭтоГрузоваяШина;
	
	Элементы.Высота.Видимость = ЭтоПосылка ИЛИ ЭтоСтандарт;
	Элементы.Длина.Видимость = ЭтоПосылка ИЛИ ЭтоСтандарт;
	Элементы.Ширина.Видимость = ЭтоПосылка ИЛИ ЭтоСтандарт;
	Элементы.ОбщийОбъем.Видимость = ЭтоПосылка ИЛИ ЭтоСтандарт;
	
	Если ЭтоЛегковаяШина ИЛИ ЭтоГрузоваяШина Тогда
		
		Элементы.ТипыШин.СписокВыбора.Очистить();
				
		Если ЭтоЛегковаяШина Тогда
			
			Элементы.ТипыШин.СписокВыбора.Добавить("лКолеса10", "R10-14");
			Элементы.ТипыШин.СписокВыбора.Добавить("лКолеса15", "R15-16");
			Элементы.ТипыШин.СписокВыбора.Добавить("лКолеса17", "R17");
			Элементы.ТипыШин.СписокВыбора.Добавить("лКолеса18", "R17.5-19");
			Элементы.ТипыШин.СписокВыбора.Добавить("лКолеса19", "R19.5-22");
					
		ИначеЕсли ЭтоГрузоваяШина Тогда
			
			Элементы.ТипыШин.СписокВыбора.Добавить("гКолеса15", "R15");
			Элементы.ТипыШин.СписокВыбора.Добавить("гКолеса16", "R16-17");
			Элементы.ТипыШин.СписокВыбора.Добавить("гКолеса17", "R17.5");
			Элементы.ТипыШин.СписокВыбора.Добавить("гКолеса18", "R18-19");
			Элементы.ТипыШин.СписокВыбора.Добавить("гКолеса19", "R19.5");
			Элементы.ТипыШин.СписокВыбора.Добавить("гКолеса20", "R20");
			Элементы.ТипыШин.СписокВыбора.Добавить("гКолеса21", "R21-22");
			Элементы.ТипыШин.СписокВыбора.Добавить("гКолеса22", "R22.5");
									
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

/////////////////////////////////////////////////////////////

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Элементы.Стоимость.Видимость = Ложь;
	Элементы.ВыездЗаГрузомСтоимость.Видимость = Ложь;
	Элементы.ДоставкаГрузаСтоимость.Видимость = Ложь;
	Элементы.ГруппаДопУслугиРезультат.Видимость = Ложь;
	
	Отказ = Ложь;
	
	ПроверитьЗаполнениеПередРасчетом(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Стр = Новый Структура;
	Стр.Вставить("ID","574");
	
	Для Каждого Элемент Из ГородОтправкиМассив Цикл
		
		//Если СтрНайти(Элемент.district, "городской совет") > 0 Тогда
			Значение = Элемент.description + "/" + Элемент.region;
		//Иначе
		//	Значение = Элемент.description + "/" + Элемент.district + "/" + Элемент.region;
		//КонецЕсли;
		
		Если Значение = ГородОтправки Тогда
			
			Стр.Вставить("townSender", Строка(Элемент.ref));	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из ГородПолученияМассив Цикл
		
		//Если СтрНайти(Элемент.district, "городской совет") > 0 Тогда
			Значение = Элемент.description + "/" + Элемент.region;
		//Иначе
		//	Значение = Элемент.description + "/" + Элемент.district + "/" + Элемент.region;
		//КонецЕсли;
		
		Если Значение = ГородПолучения Тогда
			
			Стр.Вставить("townRecipient", Строка(Элемент.ref));	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Стр.Вставить("declaredCost", Строка(ОбщаяСтоимостьГруза));
	Стр.Вставить("seatsAmount", Строка(КоличествоМест));
	Стр.Вставить("weight", Строка(ОбщийВес));
	Стр.Вставить("length", Строка(ДлинаГруза));
	Стр.Вставить("width", Строка(ШиринаГруза));
	Стр.Вставить("height", Строка(ВысотаГруза));
	Стр.Вставить("volumeGeneral", Строка(ОбщийОбъем));
	
	Если ТипГруза = "лКолеса" ИЛИ ТипГруза = "гКолеса" Тогда
		
		Стр.Вставить("cargoType", ТипыШин);
		
	Иначе
		
		Стр.Вставить("cargoType", ТипГруза);
		
	КонецЕсли;
	
	ДопУслуги = Новый Массив;
	
	Для Каждого Строка Из ДопУслугиСписок Цикл
		
		Если Строка.ДопУслуга = "Выезд за грузом к складу отправителя" Тогда
			
			Стр.Вставить("departure", 1);
			Стр.Вставить("departureCondition", Строка.ЗначениеИД);
			
		ИначеЕсли Строка.ДопУслуга = "Доставка груза к дверям получателя" Тогда
			
			Стр.Вставить("delivery", 1);
			Стр.Вставить("deliveryCondition", Строка.ЗначениеИД);
			
		Иначе
			
			ДопУслуги.Добавить(Новый Структура("service, count", Строка.ДопУслугаИД, ?(ЗначениеЗаполнено(Строка.Значение), Строка.Значение, 1)));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДопУслуги.Количество() > 0 Тогда
		Стр.Вставить("addServices", ДопУслуги);
	КонецЕсли;
	
	РассчитатьСервер(Стр);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСервер(Стр)
	
	ТекстЗапроса = САТ.лЗаписатьJSON(Стр);
	
	Соединение = САТ.ПолучитьHTTPсоединение();
	
	Операция = "v1.0/calc/json";
	
	Запрос = САТ.ПолучитьHTTPЗапрос(Операция);
	
	Запрос.УстановитьТелоИзСтроки(ТекстЗапроса,КодировкаТекста.UTF8);
	
	Попытка
		
		Ответ = Соединение.ОтправитьДляОбработки(Запрос);
		
		СтруктураОтвета = САТ.json_ПолучитьПараметры(Ответ.ПолучитьТелоКакСтроку());
		
		Если СтруктураОтвета.Успешно Тогда
			
			Для Каждого ЭлементМассива Из СтруктураОтвета.Массив Цикл
								
				Стоимость = Строка(ЭлементМассива.cost) + " грн.";
				Элементы.Стоимость.Видимость = Истина;
							
				Если ЭлементМассива.departureCost > 0 Тогда
				
					ВыездЗаГрузомСтоимость = Строка(ЭлементМассива.departureCost) + " грн.";
					Элементы.ВыездЗаГрузомСтоимость.Видимость = Истина;
					
				КонецЕсли;	
				
				Если ЭлементМассива.deliveryCost > 0 Тогда
				
					ДоставкаГрузаСтоимость = Строка(ЭлементМассива.deliveryCost) + " грн.";
					Элементы.ДоставкаГрузаСтоимость.Видимость = Истина;
					
				КонецЕсли;
				
				ДопУслугиРезультат.Очистить();
				
				Если ЭлементМассива.Свойство("addServices") Тогда
					
					Для Каждого ДопУслуга Из ЭлементМассива.addServices Цикл
						
						Услуга = ТЗДопУслуг.Найти(Строка(ДопУслуга.service), "ИД");
						
						Если Услуга <> Неопределено Тогда
							
							НоваяСтр = ДопУслугиРезультат.Добавить();
							НоваяСтр.Услуга = Услуга.Наименование;
							НоваяСтр.Стоимость = Строка(ДопУслуга.cost) + " грн.";
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Элементы.ГруппаДопУслугиРезультат.Видимость = ДопУслугиРезультат.Количество() > 0;
				
			КонецЦикла;
			
		Иначе
			
			САТ.СообщитьПользователю("Код ошибки: " + СтруктураОтвета.КодОшибки + Символы.ПС + СтруктураОтвета.ТекстОшибки);
			
		КонецЕсли;
		
	Исключение
		
		САТ.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПередРасчетом(Отказ)
	
	ГородОтправкиКорректен = Ложь;
	
	Для Каждого Элемент Из ГородОтправкиМассив Цикл
		
		//Если СтрНайти(Элемент.district, "городской совет") > 0 Тогда
			Значение = Элемент.description + "/" + Элемент.region;
		//Иначе
		//	Значение = Элемент.description + "/" + Элемент.district + "/" + Элемент.region;
		//КонецЕсли;
		
		Если Значение = ГородОтправки Тогда
			
			ГородОтправкиКорректен = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ГородОтправкиКорректен ИЛИ ПустаяСтрока(ГородОтправки) Тогда
		САТ.СообщитьПользователю("Не заполнен город отправки",, "ГородОтправки",, Отказ);
		Возврат;
	КонецЕсли;
	
	ГородПолученияКорректен = Ложь;
	
	Для Каждого Элемент Из ГородПолученияМассив Цикл
		
		//Если СтрНайти(Элемент.district, "городской совет") > 0 Тогда
			Значение = Элемент.description + "/" + Элемент.region;
		//Иначе
		//	Значение = Элемент.description + "/" + Элемент.district + "/" + Элемент.region;
		//КонецЕсли;
		
		Если Значение = ГородПолучения Тогда
			
			ГородПолученияКорректен = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ГородПолученияКорректен ИЛИ ПустаяСтрока(ГородПолучения) Тогда
		САТ.СообщитьПользователю("Не заполнен город получения",, "ГородПолучения",, Отказ);
		Возврат;
	КонецЕсли;
		
	ТипГрузаКорректен = Ложь;
	
	Если ТипГруза = "лКолеса" ИЛИ ТипГруза = "гКолеса" И ЗначениеЗаполнено(ТипыШин) Тогда
		
		ТипГрузаКорректен = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(ТипГруза) Тогда			
		
		ТипГрузаКорректен = Истина;
				
	КонецЕсли;
	
	Если НЕ ТипГрузаКорректен Тогда
		САТ.СообщитьПользователю("Не заполнен тариф",, ?(ТипГруза = "лКолеса" ИЛИ ТипГруза = "гКолеса", "ТипыШин", "ТипГруза"),, Отказ);
		Возврат;
	КонецЕсли;
	
	Если ОбщийВес = 0 Тогда
		САТ.СообщитьПользователю("Не указан вес груза",, "ОбщийВес",, Отказ);
		Возврат;		
	КонецЕсли;
	
	Если КоличествоМест = 0 Тогда
		САТ.СообщитьПользователю("Не указано количество мест",, ?(Элементы.Группа5.Видимость,"КоличествоМест", "КоличествоМест"),, Отказ);
		Возврат;				
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	
	ПосчитатьОбъем();
			
КонецПроцедуры

&НаКлиенте
Процедура ДлинаПриИзменении(Элемент)
	
	ПосчитатьОбъем();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	
	ПосчитатьОбъем();
	
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьОбъем()
	
	ОбщийОбъем = (ВысотаГруза / 100) * (ДлинаГруза / 100) * (ШиринаГруза / 100);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////

&НаКлиенте
Процедура СписокДобавить(Команда)
	
	МассивВыбранныхУслуг = Новый Массив;
	
	Для Каждого Строка Из ДопУслугиСписок Цикл 
		
		МассивВыбранныхУслуг.Добавить(Строка.ДопУслугаИД);
		
	КонецЦикла;
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыборДопУслуги", Новый Структура("ВыбранныеДопУслуги", МассивВыбранныхУслуг), ЭтаФорма,,,, Новый ОписаниеОповещения("СписокДобавитьОбработкаВыбораУслуги", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДобавитьОбработкаВыбораУслуги(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
						
		Если Результат.Наименование = "Выезд за грузом к складу отправителя" 			
		ИЛИ Результат.Наименование = "Доставка груза к дверям получателя" Тогда
		
			ОткрытьФорму("ОбщаяФорма.ФормаВыборЗначенияДопУслуги", Новый Структура("ВыбраннаяУслуга", Результат.Наименование), ЭтаФорма,,,, Новый ОписаниеОповещения("СписокДобавитьОбработкаВыбораЗначения", ЭтаФорма, Новый Структура("РезультатНаименование, РезультатИД", Результат.Наименование, Результат.ИД)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		ИначеЕсли Результат.Наименование = "Подъем на этаж ГО без лифта (каждое место до 25кг)" 
		ИЛИ Результат.Наименование = "Подъем на этаж ГО с лифтом (каждое место до 25 кг)" 
		ИЛИ Результат.Наименование = "Подъем на этаж ГП без лифта(каждое место до 25 кг)" 
		ИЛИ Результат.Наименование = "Подъем на этаж ГП с лифтом (каждое место до 25 кг)" 
		ИЛИ Результат.Наименование = "Укладка груза в гофроящик большой" 
		ИЛИ Результат.Наименование = "Укладка груза в гофроящик малый" 
		ИЛИ Результат.Наименование = "Укладка груза в гофроящик средний" 
		ИЛИ Результат.Наименование = "Укладка груза в п/п мешок со стяжкой" Тогда			
		
			ПоказатьВводЧисла(Новый ОписаниеОповещения("СписокДобавитьОбработкаВыбораЗначения", ЭтаФорма, Новый Структура("РезультатНаименование, РезультатИД", Результат.Наименование, Результат.ИД)), 1, "Сколько таких услуг Вам необходимо?", 10, 0);
				
		Иначе
			
			НоваяСтрока = ДопУслугиСписок.Добавить();
			НоваяСтрока.ДопУслуга = Результат.Наименование;
			НоваяСтрока.ДопУслугаИД = Результат.ИД;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДобавитьОбработкаВыбораЗначения(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		НоваяСтрока = ДопУслугиСписок.Добавить();
		НоваяСтрока.ДопУслуга = ДопПараметры.РезультатНаименование;
		НоваяСтрока.ДопУслугаИД = ДопПараметры.РезультатИД;
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
			НоваяСтрока.Значение = Результат.Наименование;
			НоваяСтрока.ЗначениеИД = Результат.ИД;
			
		Иначе
			
			НоваяСтрока.Значение = Результат;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ДопУслугиСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДопУслуга", Элемент.ТекущиеДанные.ДопУслуга);
	ПараметрыОткрытия.Вставить("Значение", Элемент.ТекущиеДанные.Значение);
	ПараметрыОткрытия.Вставить("ДопУслугаИД", Элемент.ТекущиеДанные.ДопУслугаИД);
	ПараметрыОткрытия.Вставить("ЗначениеИД", Элемент.ТекущиеДанные.ЗначениеИД);
	
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияЗначенияДопУслуги", ПараметрыОткрытия, ЭтаФорма,,,, Новый ОписаниеОповещения("ДопУслугиСписокВыборЗавершение", ЭтаФорма, Новый Структура("ВыбраннаяСтрока", ВыбраннаяСтрока)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслугиСписокВыборЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СтрокаТабл = ДопУслугиСписок.НайтиПоИдентификатору(ДопПараметры.ВыбраннаяСтрока);
		
		Если СтрокаТабл <> Неопределено Тогда
			
			Если Результат.Свойство("ЗначениеИД") Тогда
				СтрокаТабл.Значение = Результат.Значение;
				СтрокаТабл.ЗначениеИД = Результат.ЗначениеИД;
			Иначе
				СтрокаТабл.Значение = Результат.Значение;
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ДопУслугиСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопУслугиСписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ДопУслуги(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ФормаДопУслуги", ПолучитьСтруктуруПараметров(), ЭтаФорма,,,, Новый ОписаниеОповещения("ФормаДопУслугиПриЗакрытии", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметров()
	
	СтруктураОткрытия = Новый Структура;
	
	Массив = Новый Массив;
	
	Для Каждого Строка Из ДопУслугиСписок Цикл
		
		Массив.Добавить(Новый Структура("ДопУслуга, Значение, ДопУслугаИД, ЗначениеИД", Строка.ДопУслуга, 
			Строка.Значение, Строка.ДопУслугаИД, Строка.ЗначениеИД));
		
	КонецЦикла;
	
	СтруктураОткрытия.Вставить("ДопУслугиСписок", Массив);
	
	Возврат СтруктураОткрытия;
	
КонецФункции

&НаКлиенте
Функция ФормаДопУслугиПриЗакрытии(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ДопУслугиСписок.Очистить();
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
			Для Каждого Строка Из Результат.ДопУслугиСписок Цикл
				
				НоваяСтрока = ДопУслугиСписок.Добавить();
				
				НоваяСтрока.ДопУслуга = Строка.ДопУслуга;
				НоваяСтрока.Значение = Строка.Значение;
				НоваяСтрока.ДопУслугаИД = Строка.ДопУслугаИД;
				НоваяСтрока.ЗначениеИД = Строка.ЗначениеИД;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДопУслуги.Заголовок = "Доп. услуги " + ?(ДопУслугиСписок.Количество() > 0, " (" + ДопУслугиСписок.Количество() + ")", "");
		
КонецФункции

/////////////////////////////////////////////////////////////

#Если Клиент Тогда
	
	ГородОтправкиМассив = Новый Массив;
	ГородПолученияМассив = Новый Массив;	
	
#КонецЕсли

#Если Сервер Тогда
	
	ТЗДопУслуг = Новый ТаблицаЗначений;
	ТЗДопУслуг.Колонки.Добавить("Наименование");
	ТЗДопУслуг.Колонки.Добавить("ИД");
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Запрет на выдачу груза";
	НоваяСтрока.ИД = "2d832f7b-b6b0-11e5-bb36-0017a4770440";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Палетирование";
	НоваяСтрока.ИД = "4293056e-4cb1-406d-a2cd-e8f6d2ae6721";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Подъем на этаж ГО без лифта (каждое место до 25кг)";
	НоваяСтрока.ИД = "535f04ad-38ae-4e40-85a6-8e681e269c41";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Подъем на этаж ГО с лифтом (каждое место до 25 кг)";
	НоваяСтрока.ИД = "8a1b5394-fa1e-452c-9830-be0ae11fa2cc";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Подъем на этаж ГП без лифта(каждое место до 25 кг)";
	НоваяСтрока.ИД = "a2a82200-c29a-4a2e-9270-7bf5ae12a404";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Подъем на этаж ГП с лифтом (каждое место до 25 кг)";
	НоваяСтрока.ИД = "ccd257ff-1ffe-470b-89e8-39a46cad4cc5";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Стретчевание пленкой до 2 кг (до 0,05 м3)";
	НоваяСтрока.ИД = "4fdbcdc1-72ed-4e7b-bd69-6a8cd19ee00b";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Стретчевание пленкой до 25 кг (до 0,2 м3)"	"Услуги упаковки";
	НоваяСтрока.ИД = "94489b66-648c-4479-9aea-502f4e544c8b";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Стретчевание пленкой до 80 кг (до 0,3 м3)";
	НоваяСтрока.ИД = "ff3bc92c-de3c-46cc-a07a-127fc8006a0a";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Стягивание груза п/п стяжкой";
	НоваяСтрока.ИД = "efca98cc-d797-4b0d-9fcf-ddcf6b346715";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Укладка груза в гофроящик большой";
	НоваяСтрока.ИД = "29302b1f-d100-494e-ae8e-cb44bdce11fc";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Укладка груза в гофроящик малый";
	НоваяСтрока.ИД = "a6b3167d-8ad7-4654-9cc4-02d895b31d93";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Укладка груза в гофроящик средний";
	НоваяСтрока.ИД = "4802eb80-5d1b-4366-9da6-085a5e233e75";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Укладка груза в п/п мешок со стяжкой";
	НоваяСтрока.ИД = "2ada468c-36f9-11dd-a17b-001a4d3b885e";
	
	НоваяСтрока = ТЗДопУслуг.Добавить();
	НоваяСтрока.Наименование = "Упаковка документов";
	НоваяСтрока.ИД = "6d3a1ae4-7d47-45a0-8574-f134196a97ee";
	
#КонецЕсли